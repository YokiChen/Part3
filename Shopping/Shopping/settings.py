"""
Django settings for Shopping project.

Generated by 'django-admin startproject' using Django 1.11.16.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '6&y#1u67(5v$_fjf&0mzavswur7v5j^9b&n)2czdyu6tzj-o%h'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'User',
    'Goods',
    'Store',
    'Order',
    'tinymce',
    'Cart',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Shopping.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Shopping.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        # 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        'NAME': 'shopping',
        'USER': 'root',
        'PASSWORD': '123456',
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'zh-Hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# session
SESSION_SERIALIZER = 'django.contrib.sessions.serializers.PickleSerializer'
# SESSION_ENGINE = "django.contrib.sessions.backends.cache"
# SESSION_CACHE_ALIAS = "default"



# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'

# 静态共享资源的配置
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]

# 富文本编辑器，tinymce的配置

TINYMCE_JS_URL = "/static/tiny_mce/tiny_mce.js"
TINYMCE_JS_ROOT = "/static/tiny_mce/"
TINYMCE_DEFAULT_CONFIG = {
    'theme': "advanced",
     'width': 700,
     'height': 400,
}

# 配置cache
CACHES = {
     "default": {
         "BACKEND": "django_redis.cache.RedisCache",
        #选中的数据库
         "LOCATION": "redis://127.0.0.1:6379/1",
         "OPTIONS": {
         "CLIENT_CLASS": "django_redis.client.DefaultClient",
        #"PASSWORD":密码
         }
    }
}


# 全文搜索引擎
HAYSTACK_CONNECTIONS = {
     'default': {
     'ENGINE': 'mysearch.whoosh_cn_backend.WhooshEngine', # 将来需要修改
     'PATH': os.path.join(BASE_DIR, 'whoosh_index'),
     }
}

# 分页设置
HAYSTACK_SEARCH_RESULTS_PER_PAGE = 10
# 索引生成项设置
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'

#
# # qq IMAP/SMTP 配置
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.qq.com'
# EMAIL_PORT = 25  # 或者 465/587 是设置了 SSL 加密方式
#
#
# # 发送邮件的邮箱
# EMAIL_HOST_USER = '873356647@qq.com'
#
# # 在邮箱中设置客户端授权密码
# EMAIL_HOST_PASSWORD = 'hfifwmdiiwgxbbda'
#
# # 这里必须是 True，否则发送不成功
# EMAIL_USE_TLS = True
#
# # 收件人看到的发件人, 必须是一直且有效的
# EMAIL_FROM = 'Tencent<873356647@qq.com>'


# qq POP3/SMTP 配置
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.qq.com'
EMAIL_PORT = 110  # 或者 995 是设置了 SSL 加密方式
# 发送邮件的邮箱
EMAIL_HOST_USER = '873356647@qq.com'
# 在邮箱中设置的客户端授权密码
# 如果重新设置了新的授权码,直接使用最新的授权码即可
EMAIL_HOST_PASSWORD = 'xxxxxx'
# 这里必须是 True，否则发送不成功
EMAIL_USE_TLS = True
# 收件人看到的发件人
EMAIL_FROM = 'Tencent<873356647@qq.com>'
